#include <stdio.h>

// XOR operation for encryption and decryption
void xorOperation(unsigned char *plaintext, unsigned char *key, int block_size) {
    for (int i = 0; i < block_size; ++i) {
        plaintext[i] ^= key[i];
    }
}

// ECB Encryption
void encryptECB(unsigned char *plaintext, unsigned char *key, int block_size) {
    xorOperation(plaintext, key, block_size);
}

// CBC Encryption
void encryptCBC(unsigned char *plaintext, unsigned char *key, unsigned char *iv, int block_size, int num_blocks) {
    xorOperation(plaintext, iv, block_size);
    xorOperation(plaintext, key, block_size);

    for (int i = 1; i < num_blocks; ++i) {
        xorOperation(plaintext + i * block_size, key, block_size);
    }
}

// CBC Decryption
void decryptCBC(unsigned char *ciphertext, unsigned char *key, unsigned char *iv, int block_size, int num_blocks) {
    for (int i = num_blocks - 1; i >= 1; --i) {
        xorOperation(ciphertext + i * block_size, key, block_size);
    }

    xorOperation(ciphertext, key, block_size);
    xorOperation(ciphertext, iv, block_size);
}

int main() {
    unsigned char key[] = "SECRETKEY"; // Replace with your key
    unsigned char iv[] = "INITVECTOR"; // Replace with your initialization vector
    unsigned char plaintext[] = "PLAINTEXT"; // Replace with your plaintext
    int block_size = 8; // Block size in bytes

    int num_blocks = sizeof(plaintext) / block_size;

    // Encrypt using ECB mode
    encryptECB(plaintext, key, block_size * num_blocks);

    // Create a copy of the encrypted data for CBC testing
    unsigned char encrypted_cbc[sizeof(plaintext)];
    for (int i = 0; i < sizeof(plaintext); ++i) {
        encrypted_cbc[i] = plaintext[i];
    }

    // Encrypt using CBC mode
    encryptCBC(encrypted_cbc, key, iv, block_size, num_blocks);

    // Simulate an error in the transmitted ciphertext (corrupting first byte)
    encrypted_cbc[0] ^= 0x01;

    // Decrypt using CBC mode
    decryptCBC(encrypted_cbc, key, iv, block_size, num_blocks);

    // Print decrypted result
    printf("Decrypted Result (ECB): %s\n", plaintext);
    printf("Decrypted Result (CBC with Error): %s\n", encrypted_cbc);

    return 0;
}
