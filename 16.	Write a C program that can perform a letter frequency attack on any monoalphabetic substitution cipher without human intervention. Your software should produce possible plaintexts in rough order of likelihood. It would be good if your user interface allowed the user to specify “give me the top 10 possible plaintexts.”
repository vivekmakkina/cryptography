#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define NUM_LETTERS 26

// Define expected frequency distribution of letters in English language
const double english_freq[NUM_LETTERS] = {
    0.08167, 0.01492, 0.02782, 0.04253, 0.12702, 0.02228, 0.02015,
    0.06094, 0.06966, 0.00153, 0.00772, 0.04025, 0.02406, 0.06749,
    0.07507, 0.01929, 0.00095, 0.05987, 0.06327, 0.09056, 0.02758,
    0.00978, 0.02361, 0.00150, 0.01974, 0.00074
};

// Structure to store letter frequency information
typedef struct {
    char letter;
    int frequency;
} LetterFrequency;

// Function to calculate letter frequencies in the given text
void calculateLetterFrequencies(char *text, LetterFrequency *letterFreq) {
    for (int i = 0; i < NUM_LETTERS; i++) {
        letterFreq[i].letter = 'A' + i;
        letterFreq[i].frequency = 0;
    }

    for (int i = 0; text[i]; i++) {
        if (isalpha(text[i])) {
            letterFreq[toupper(text[i]) - 'A'].frequency++;
        }
    }
}

// Function to compare letter frequency for sorting
int compareLetterFrequency(const void *a, const void *b) {
    return ((LetterFrequency *)b)->frequency - ((LetterFrequency *)a)->frequency;
}

int main() {
    char ciphertext[1000]; // Replace with your ciphertext
    int num_possible_plaintexts = 10;

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0'; // Remove newline character

    LetterFrequency letterFreq[NUM_LETTERS];
    calculateLetterFrequencies(ciphertext, letterFreq);

    // Sort letter frequencies in descending order
    qsort(letterFreq, NUM_LETTERS, sizeof(LetterFrequency), compareLetterFrequency);

    printf("\nTop %d possible plaintexts:\n", num_possible_plaintexts);
    for (int i = 0; i < num_possible_plaintexts; i++) {
        char possible_plaintext = letterFreq[i].letter + 'a' - 'A';
        printf("Plaintext %d: %c\n", i + 1, possible_plaintext);
    }

    return 0;
}
